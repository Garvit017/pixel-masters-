// This is an example of how you would implement the ProductCard using styled-components
// To use this, you would need to install styled-components: npm install styled-components

import { useState } from 'react';
import styled, { css } from 'styled-components';

// Styled components
const Card = styled.div`
  background-color: white;
  border-radius: 0.5rem;
  overflow: hidden;
  transition: all 0.3s ease;
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  
  ${props => props.isHovered && css`
    transform: scale(1.05);
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
  `}
  
  @media (prefers-color-scheme: dark) {
    background-color: #1f2937;
  }
`;

const ImageContainer = styled.div`
  position: relative;
  padding-bottom: 56.25%;
  overflow: hidden;
  background-color: #f3f4f6;
  
  @media (prefers-color-scheme: dark) {
    background-color: #374151;
  }
`;

const ProductImage = styled.img`
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.3s ease-in-out;
`;

const Badge = styled.div`
  position: absolute;
  font-size: 0.75rem;
  font-weight: bold;
  padding: 0.25rem 0.5rem;
  margin: 0.5rem;
  border-radius: 0.25rem;
  color: white;
`;

const OutOfStockBadge = styled(Badge)`
  top: 0;
  right: 0;
  background-color: #ef4444;
`;

const CategoryBadge = styled(Badge)`
  top: 0;
  left: 0;
  background-color: #0284c7;
`;

const Content = styled.div`
  padding: 1rem;
`;

const Header = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 0.5rem;
`;

const Title = styled.h3`
  font-size: 1.125rem;
  font-weight: 600;
  color: #1f2937;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  
  @media (prefers-color-scheme: dark) {
    color: white;
  }
  
  @media (max-width: 640px) {
    font-size: 1rem;
  }
`;

const Price = styled.span`
  font-size: 1.125rem;
  font-weight: 700;
  color: #0284c7;
  
  @media (prefers-color-scheme: dark) {
    color: #38bdf8;
  }
  
  @media (max-width: 640px) {
    font-size: 1rem;
  }
`;

const Description = styled.p`
  font-size: 0.875rem;
  color: #4b5563;
  margin-bottom: 0.75rem;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
  
  @media (prefers-color-scheme: dark) {
    color: #d1d5db;
  }
  
  @media (max-width: 640px) {
    font-size: 0.75rem;
  }
`;

const RatingContainer = styled.div`
  display: flex;
  align-items: center;
  margin-bottom: 0.75rem;
`;

const Stars = styled.div`
  display: flex;
  margin-right: 0.5rem;
`;

const Star = styled.svg`
  width: 1rem;
  height: 1rem;
  color: #facc15;
`;

const EmptyStar = styled(Star)`
  color: #d1d5db;
`;

const RatingText = styled.span`
  font-size: 0.875rem;
  color: #4b5563;
  
  @media (prefers-color-scheme: dark) {
    color: #9ca3af;
  }
`;

const ColorsContainer = styled.div`
  display: flex;
  align-items: center;
  margin-bottom: 0.75rem;
`;

const ColorsLabel = styled.span`
  font-size: 0.75rem;
  color: #6b7280;
  margin-right: 0.5rem;
  
  @media (prefers-color-scheme: dark) {
    color: #9ca3af;
  }
`;

const Colors = styled.div`
  display: flex;
  gap: 0.25rem;
`;

const ColorDot = styled.div`
  width: 1rem;
  height: 1rem;
  border-radius: 9999px;
  border: 1px solid #d1d5db;
  background-color: ${props => props.color};
  
  @media (prefers-color-scheme: dark) {
    border-color: #4b5563;
  }
`;

const Button = styled.button`
  width: 100%;
  padding: 0.5rem 1rem;
  border-radius: 0.25rem;
  font-weight: 500;
  transition: background-color 0.2s;
  
  ${props => props.disabled ? css`
    background-color: #d1d5db;
    color: #6b7280;
    cursor: not-allowed;
    
    @media (prefers-color-scheme: dark) {
      background-color: #4b5563;
      color: #9ca3af;
    }
  ` : css`
    background-color: #0284c7;
    color: white;
    
    &:hover {
      background-color: #0369a1;
    }
  `}
`;

const ProductCardStyled = ({ product }) => {
  const [isHovered, setIsHovered] = useState(false);
  
  const { name, description, price, rating, image, category, inStock, colors } = product;
  
  // Format price to 2 decimal places
  const formattedPrice = new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD'
  }).format(price);
  
  // Generate stars for rating
  const renderStars = () => {
    const stars = [];
    const fullStars = Math.floor(rating);
    const hasHalfStar = rating % 1 >= 0.5;
    
    // Full stars
    for (let i = 0; i < fullStars; i++) {
      stars.push(
        <Star key={`star-${i}`} viewBox="0 0 20 20">
          <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
        </Star>
      );
    }
    
    // Half star
    if (hasHalfStar) {
      stars.push(
        <Star key="half-star" viewBox="0 0 20 20">
          <defs>
            <linearGradient id="half-gradient" x1="0%" y1="0%" x2="100%" y2="0%">
              <stop offset="50%" stopColor="currentColor" stopOpacity="1" />
              <stop offset="50%" stopColor="currentColor" stopOpacity="0.3" />
            </linearGradient>
          </defs>
          <path fill="url(#half-gradient)" d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
        </Star>
      );
    }
    
    // Empty stars
    const emptyStars = 5 - stars.length;
    for (let i = 0; i < emptyStars; i++) {
      stars.push(
        <EmptyStar key={`empty-star-${i}`} viewBox="0 0 20 20">
          <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
        </EmptyStar>
      );
    }
    
    return stars;
  };

  return (
    <Card 
      isHovered={isHovered}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      <ImageContainer>
        <ProductImage 
          src={image} 
          alt={name}
        />
        {!inStock && (
          <OutOfStockBadge>
            Out of Stock
          </OutOfStockBadge>
        )}
        <CategoryBadge>
          {category}
        </CategoryBadge>
      </ImageContainer>
      
      <Content>
        <Header>
          <Title>{name}</Title>
          <Price>{formattedPrice}</Price>
        </Header>
        
        <Description>{description}</Description>
        
        <RatingContainer>
          <Stars>
            {renderStars()}
          </Stars>
          <RatingText>{rating.toFixed(1)}</RatingText>
        </RatingContainer>
        
        {colors.length > 0 && (
          <ColorsContainer>
            <ColorsLabel>Colors:</ColorsLabel>
            <Colors>
              {colors.map(color => (
                <ColorDot 
                  key={color}
                  color={color.toLowerCase()}
                  title={color}
                />
              ))}
            </Colors>
          </ColorsContainer>
        )}
        
        <Button disabled={!inStock}>
          {inStock ? 'Add to Cart' : 'Out of Stock'}
        </Button>
      </Content>
    </Card>
  );
};

export default ProductCardStyled;